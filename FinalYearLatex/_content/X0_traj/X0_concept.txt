BACKGROUND
Given the context of RoboCup, it was assumed that the robot will always be walking on a planar surface. 
As such, it would be useful to have a method for guiding the robot from its current position 
to another in cartesian space. For most mobile robots the easiest method is the use of trajectory
planning, as described by [Siclliano  161-168]. However, an arbitrary trajectory is not a convenient 
method for guiding a bipedal robot. Here, [Kajita] initially turned to pattern generation using the period 
of an inverted pendulum to define the proceeding step. Later he turned to Preview Control of the ZMP to generate
subsequent steps. However, neither method adequately caters to trajectory tracking.

CONCEPT
Considering an arbitrary planar trajectory through a series of waypoints, as seen in [FIGURE] in [RED].
Starting from point [A], displacements between elements were summed along the path until the 
desired footstep magnitude was reached at point [B].

At [B] a circle [C] with a diameter equal to the hip width of the robot was constructed. The circle
was then bisected circle by a line normal to AB; DE.

Given the equations for line DE and circle [C] [equations] the two intersections between C and DE, were 
determined by setting [equation 1] = [equation 2]

This simplified to following quadratic, where the roots of the equation define the X components of D and E.

The y components of D and E can found by substituting the X components back into the equation 
for line DE.

This resulted in two possible footstep positions differing only in the sign of the component added to [B].

The accumulated distance was then reset, before returning to iterating along the trajectory again until
the magnitude of footstep was reached. The aforementioned process was then repeated to yield a second pair of
footstep positions, before again iterating along the trajectory.

Upon reaching the last element of the trajectory, the process is repeated once more with [B](x,y) = Q(end).
 
IMPLEMENTATION - GLOBAL COORDINATES - PRE CALCULATED FOOTSTEPS

Taking the midpoint between the robot's feet as the origin of an arbitrary planar trajectory, a path to an location is 
defined. 

ALGORITHM 1:
    s    = StepSize
    Q    = Trajectory
    pREF = zeros(2,length(Q));   % [x z]áµ€
    r    = params.HipWidth/2;       % Radius of Circle 
    STEP = params.mode;

    gradFUNC = @(A,B) (B(2) - A(2)) ...
                     /(B(1) - A(1));    % Gradient -> `m`

    accuDist = 0;       % Accumulated Distance   
    A        = Q(:,1);  % A: Trajectory Start point

    for i = 2:length(Q)
        accuDist = accuDist + norm(Q(:,i-1) - Q(:,i));
        pREF(:,i) = pREF(:,i-1);
        if accuDist > stepSize || i == length(Q)
            B = Q(:,i);
            M = gradFUNC(A([1 3]),B([1 3]));
            pREF(:,i)   = B([1 3]) + (STEP*[M*r*sqrt(1/(1+M^2)); ...
                                             -r*sqrt(1/(1+M^2))]);
            accuDist    = 0;
            STEP        =  -1 * STEP;
            A = B;
        end
    end



IMPLEMENTATION - LOCAL COORDINATES - `LIVE` CALCULATED FOOTSTEPS
- BORROWING KAJITA's IDEA

ALGORITHM 2:

