Consider an arbitrary planar trajectory, $\mathbf{Q}_{2 \times N}$, through a series of waypoints, seen in red in figure 
\ref{fig:TRJ_TrajGen}. Starting from point $A$, displacements between elements are summed along 
the path until the desired footstep magnitude is reached at point $B$.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.5\linewidth]{_content/X0_traj/X0_fig_geo.png}
        \caption{Geometric}
        \label{fig:TRJ_TrajGen}
    \end{center}
\end{figure}

At $B$ a circle, $C$, with a diameter equal to the hip width of the robot is constructed. The circle
is then bisected by a line normal to $AB$: $DE$. Following equations now describe the resulting geometric problem.

\begin{align}
    y       = (-\nabla_{AB})^{-1} \cdot (x - x_{B}) + y_{B}    \label{eq:TRJ_Line}   \\
    r^{2}   = (x - x_{B})^{2} + (y - y_{B})^{2}                \label{eq:TRJ_Circ}
\end{align}

Equation \eqref{eq:TRJ_Line} is the formula for line $DE$, where the output $y$ and the input $x$ form
a point somewhere along the line $DE$. As the gradient of $AB$ is given by $\nabla_{AB}$, the gradient
of $DE$ must be $(-\nabla_{AB})^{-1}$. The remaining inputs, $x_B$ and $y_B$ are the centre of
circle $C$. Equation \eqref{eq:TRJ_Circ} is the formula for circle $C$, where point $(x_B,y_B)$ is the 
centre and the remain input $(x,y)$ is a point on the circumference of the circle. The output, $r$, 
is the radius of the circle. Ideally the $(x,y)$ point is the a solution to both equations.
The equations for line $DE$ and circle $C$ are then solved for $y$, and equated to form the quadratic equation:

\begin{align}
    \alpha x^{2} - 2x \cdot x_{B} \alpha + \alpha x^{2}_{B} - r^{2} \label{eq:TRJ_Quad}. \\
    \alpha = 1 + (\nabla_{AB})^{-2}
\end{align}

$\alpha$ is temporary variable in order to make the the former quadratic equation, \eqref{eq:TRJ_Quad},
more manageable. The quadratic formula is then used to find the roots of equation \eqref{eq:TRJ_Quad}, which
are the $X$ components of the intersections between $DE$ and $C$; points $D$ and $E$. At this point, $\alpha$ was 
substituted back into the equation to yield:

\begin{align}
    X_{DE \cap C} = x_{B} \pm r \cdot (\nabla_{AB}) \sqrt{(\nabla^{2}_{AB} + 1)^{-1}}    \label{eq:TRJ_X} \\
    Y_{DE \cap C} = y_{B} \mp r \cdot \sqrt{(\nabla^{2}_{AB} + 1)^{-1}}                  \label{eq:TRJ_Y}
\end{align}

The coordinates $(X_{DE \cap C},Y_{DE \cap C})$ form two possible footstep positions differing only 
in the sign of the component added to $B_{(x,y)}$.
\newline
The distance accumulated up until the the generation of $(X_{DE \cap C},Y_{DE \cap C})$, is then reset.
Point $A$ then takes the value of $B$, before then returning to the process of iterating along the 
trajectory until, again, the magnitude of footstep is reached. Equations \ref{eq:TRJ_X} and \ref{eq:TRJ_Y} are
then applied to a new value of $B_{(x,y)}$ to yield a second pair of footstep positions. This process of 
iterating along the trajectory, and generating footsteps, continues until the trajectory's end, where 
the process iss repeated once more with $B_{(x,y)} = \mathbf{Q}(t)_{(:,n)}$. This procedure is described below in
algorithm \ref{alg:Glb2Fts}.

\input{_content/X0_traj/X0_AlgA.txt}

Taking the midpoint between the robot's feet as the origin of an arbitrary planar trajectory and following
algorithm \ref{alg:Glb2Fts} produces the series of footsteps seen in figure \ref{fig:TRJ_Sign}. Notice 
the impact of the $STEP$ variable. On the left $STEP$ was initialised with $1$, while on the right $STEP$ was
initialised with $-1$. Thus, on the left, the first step the robot took is with the left foot, while on the 
right the opposite is true. Additionally each subsequent step, on either side, is with the formerly planted foot.
Thus both the FKM and the decision as to which foot is in motion, are driven by the sign of a the $STEP$ variable.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.96\linewidth]{_content/X0_traj/X0_fig_sign.png}
        \caption{Impact of the $STEP$ variable on resulting footsteps}
        \label{fig:TRJ_Sign}
    \end{center}
\end{figure}

However, this method disintegrates if the trajectory rotates more than $\pm \frac{\pi}{2}$ about the global 
$Z$ axis. Figure \ref{fig:TRJ_Fail} demonstrates the breakdown which culminates in a double step on a 
particular side, the side in question depending on the inital value of $STEP$. This is caused by the change 
in sign of the roots of equation \eqref{eq:TRJ_Quad}.
\newline

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.96\linewidth]{_content/X0_traj/X0_fig_fail.png}
        \caption{Step Reference Trajectory Composition Breakdown}
        \label{fig:TRJ_Fail}
    \end{center}
\end{figure}

\input{_content/X0_traj/X0_AlgB.txt}

To resolve this, rather than tracking and updating the location of the $Base$ of the FKM and the location of 
the $End$ $Effector$ with a pair of global variables, it is assumed that the base of fixed foot is at the origin. 
Thus, the robot is now defined in terms of a local coordinate system. Algorithm \ref{alg:Glb2Fts} is then modified
to update every point along the global trajectory, $\mathbf{Q}(t)$.

The variable $\mathbf{T^{B}_{E}}$ is initialised as $\mathbf{I}_{4 \times 4}$, and is used to hold 
the homogenous transform that describes the relationship between the $Base$ and the $End$ $Effector$.
This transform is then decomposed into its rotation matrix, $\mathbf{R^{B}_{E}}$, and its position vector,
$\vec{r^{B}_{E}}$. $\mathbf{R^{B}_{E}}^{\top}$ was applied to the difference between every subsequent position vector 
along the trajectory, and position of the $End$ $Effector$. This transforms the original trajectory into 
the coordinates of the $End$ $Effector$, following the completion of a step, as this becomes the origin, the $Base$,
of the kinematic chain in preparation for the next step. This idea is borrowed directly from Kajita 
\citep{kajita_2003_biped}, and is presented as algorithm \ref{alg:Loc2Fts}.
\newline
Algorithm \ref{alg:Glb2Fts} works sufficiently for simple trajectories that do not result in the 
robot turning beyond $\pm \frac{\pi}{2}$ about a global $Z$ axis, while algorithm \ref{alg:Loc2Fts} works for any 
trajectory. Both methods are ideal for statically stable locomotion, however, must be modified further
in order to work with dynamically stable approaches to locomotion.
\newline
Given the global trajectory, $\mathbf{Q}(t)$, is a function of time the variable $\mathbf{REF}$ is also a 
function of time. During execution in discrete time, these two geometric objects are iterated through 
along with time. Thus this proposed method generates a footstep trajectory. To the best of the author's 
knowledge and research, this method is entirely novel.