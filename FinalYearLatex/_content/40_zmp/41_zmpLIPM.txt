Rather than constraining the CoM of the robot during locomotion, the better approach is 
to control it, using the position of an inverted pendulum. This approached is developed and 
implemented by Shuuji Kajita \citep{kajita_2003_biped} in the early 2000s. 

\subsubsection*{ZMP simplification}

The inverted pendulum simplifies VukobratoviÄ‡'s ZMP by assuming that the ankle 
about which the torque is applied intersecT with the ground. This intersection forms the base of the
pendulum and origin of the coordinate system in which the pendulum is defined. 
It is also assumed that the robot is capable of generating sufficient torque about 
the ankle in order to shift the position of the CoM. The mass of the foot is ignored, while the assumption
that friction holds the foot in place is retained. These simplifications yield equation 
\eqref{eq:simpZMP} from equations~\eqref{eq:ZMPF} and \eqref{eq:ZMPM}.

\begin{equation}
    \mathbf{0} = \vec{BP} \times \mathbf{R_{xyz}} - \mathbf{M_{A}}  \label{eq:simpZMP}
\end{equation}

$\mathbf{A}$ intersecT with the ground, becoming the fulcrum of the pendulum. 
$R_{y}$ balances $F_{\mathbf{A}y}$ and thus $R_{y} = mg$, where $m$ is the mass of the robot. 
As the horizontal componenT of $\mathbf{F_{A}}$ are balanced by the horizontal friction componenT 
of $\mathbf{R_{xyz}}$, equation~\eqref{eq:simpZMP} can be solved for the $\mathbf{ZMP}(p_x,p_z)$ as follows:

\begin{align}
    p_x &= \frac{\tau_z}{mg}   \label{eq:zmpx} \\
    p_z &= \frac{-\tau_x}{mg}  \label{eq:zmpz}   
\end{align}

Equations~\eqref{eq:zmpx} and \eqref{eq:zmpz} determine the relationship between the horizontal componenT
of $\mathbf{M_{A}}$ ($\tau_x, \tau_z$), the mass of the robot, and the Zero Moment Point, with respect to the fulcrum of
a pendulum.

\subsubsection*{Inverted Pendulum Derivation}

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.45\linewidth]{_content/40_zmp/fig_LIPM_labelled_true.png}
        \caption{Inverted Pendulum $XZ$ view from above}\label{fig:LIPM}
    \end{center}
\end{figure}

The mass of an inverted pendulum of mass $m$ generates torques about the $X$ and $Z$ axes. 
These are seen in red in Figure~\ref{fig:LIPM}. The pendulum is constrained
to move in the $XZ$ plane at constant height $y_c$.
The point $\mathbf{P}$, depicted in purple, is the $(x,z)$ position of the pendulum's mass and is 
controlled by two axially applied input torques, $\tau_x$ and $\tau_z$. These input torques 
are shown in blue.
The acceleration of the pendulum is thus given by equations~\eqref{eq:lipmx} and \eqref{eq:lipmz}.

\begin{align}
    \ddot{x} &= \frac{g}{y_c}x - \frac{1}{my_c}\tau_z   \label{eq:lipmx} \\
    \ddot{z} &= \frac{g}{y_c}z + \frac{1}{my_c}\tau_x   \label{eq:lipmz}   
\end{align}

\subsubsection*{Linear Inverted Pendulum and Zero Moment Point Model}

Rearranging the ZMP equations~\eqref{eq:zmpx} and \eqref{eq:zmpz} for torque and then substituting into the
linear inverted pendulum equations~\eqref{eq:lipmx} and \eqref{eq:lipmz}, yields a relationship between the ZMP and the CoM.
This relationship, seen in equations~\eqref{eq:ZMP_LIPMx} and \eqref{eq:ZMP_LIPMz}, takes the current position of the 
CoM as an input, along with its planar accelerations, and returns the ZMP. The ZMP being the point at which 
the vertical reaction, $R_y$ must occur in order to balance $mg$ without generating net torques about the
$X$ and $Z$ axes. If this ZMP is within the support polygon it is assumed that the pendulum is dynamically stable.

\begin{align}
    p_x &= x - \frac{y_{c}}{g} \ddot{x} \label{eq:ZMP_LIPMx} \\
    p_z &= z - \frac{y_{c}}{g} \ddot{z} \label{eq:ZMP_LIPMz}
\end{align}

The previous equations return the ZMP as the output, when instead the aim is drive the CoM of 
the robot as a function of the ZMP. To achieve this an input, $\mathbf{u}$, is defined as the 
time derivative of the acceleration of the CoM, seen in equation~\eqref{eq:jerk}.

\begin{equation}\label{eq:jerk}
    \frac{d}{dt} \: \mathbf{\ddot{x}} = \begin{bmatrix} u_x \\ u_z \end{bmatrix}
\end{equation}

Given this input, the dynamics of the pendulum can be converted to a strictly proper,  
state space representation \citep{kajita_2003_biped}, given by the equation~\eqref{eq:LIPM_stateCT}.

\begin{equation}\label{eq:LIPM_stateCT}
    \begin{split}
        \overbrace{\frac{\delta}{\delta t}
        \begin{bmatrix}
            x           \\
            \dot{x}     \\
            \ddot{x}    \\
            z           \\
            \dot{z}     \\ 
            \ddot{z}    \\
        \end{bmatrix}}^{\mathbf{\dot{x}}} &= 
        \overbrace{\begin{bmatrix}
            0 & 1 & 0 & 0 & 0 & 0 \\
            0 & 0 & 1 & 0 & 0 & 0 \\
            0 & 0 & 0 & 0 & 0 & 0 \\ 
            0 & 0 & 0 & 1 & 0 & 0 \\ 
            0 & 0 & 0 & 0 & 1 & 0 \\
            0 & 0 & 0 & 0 & 0 & 0 \\
        \end{bmatrix}}^{\mathbf{A}}
        \overbrace{\begin{bmatrix}
            x           \\
            \dot{x}     \\
            \ddot{x}    \\
            z           \\
            \dot{z}     \\ 
            \ddot{z}    \\
        \end{bmatrix}}^{\mathbf{x}} + 
        \overbrace{\begin{bmatrix}
            0 & 0  \\
            0 & 0  \\
            1 & 0  \\
            0 & 0  \\ 
            0 & 0  \\
            0 & 1  \\
        \end{bmatrix}}^{\mathbf{B}}
        \overbrace{\begin{bmatrix}
            u_x \\ u_z
        \end{bmatrix}}^{\mathbf{u}} \\
        \overbrace{\begin{bmatrix}
            p_x \\ p_z \\
        \end{bmatrix}}^{\mathbf{y}}&= 
        \overbrace{\begin{bmatrix}
            1 & 0 & \frac{-y_{c}}{g} & 0 & 0 & 0 \\
            0 & 0 & 0 & 1 & 0 & \frac{-y_{c}}{g} \\
        \end{bmatrix}}^{\mathbf{C}}
        \begin{bmatrix}
            x           \\
            \dot{x}     \\
            \ddot{x}    \\
            z           \\
            \dot{z}     \\
            \ddot{z}    \\
        \end{bmatrix}
    \end{split}
\end{equation}

The continuous time system, equation~\eqref{eq:LIPM_stateCT}, must be discretized with sampling 
time $T$, as the robot model is simulated in discrete time. Additionally, implementation in MATLAB
or on the robot itself requires that the system be discretized. The system is discretized
using the forward Euler Method. The complete discrete time model is of the form found in 
equation~\eqref{eq:LIPM_stateDT}.

\begin{equation}\label{eq:LIPM_stateDT}
    \begin{split}
        \mathbf{x}(k+1) &= \mathbf{A_d}\mathbf{x}(k) + \mathbf{B_d}\mathbf{u}(k) \\
        \mathbf{y}(k)   &= \mathbf{C_d}\mathbf{x}(k)                             \\
    \end{split}
\end{equation}
... where;
\begin{equation}
    \begin{split}
        \mathbf{x}(k) &= [x(kT) \:\: \dot{x}(kT) \:\: \ddot{x}(kT) \:\: z(kT) \:\: \dot{z}(kT) \:\: \ddot{z}(kT)]^\top \\
        \mathbf{u}(k) &= [u_x(kT) \:\: u_z(kT)]^\top  \\
    \end{split}
\end{equation}
Matrices $\mathbf{A_d}$ and $\mathbf{B_d}$ are found in equation~\eqref{eq:LIPM_discrete}, 
while matrix $\mathbf{C_d}$ is equal to $\mathbf{C}$ which 
is found in \eqref{eq:LIPM_stateCT}.

\begin{equation}\label{eq:LIPM_discrete}
    \begin{aligned}
        \mathbf{A_d} =
        \begin{bmatrix}
            1 & T & \frac{T^{2}}{2} & 0 & 0 & 0   \\
            0 & 1 &               T & 0 & 0 & 0   \\ 
            0 & 0 &               1 & 0 & 0 & 0   \\
            0 & 0 & 0 & 1 & T & \frac{T^{2}}{2}   \\
            0 & 0 & 0 & 0 &  1 &              T   \\
            0 & 0 & 0 & 0 &  0 &              1   \\
        \end{bmatrix}
    \end{aligned} \:\:
    \begin{aligned}
        \mathbf{B_d} =
        \begin{bmatrix}
            \frac{T^{3}}{6} & 0 \\ 
            \frac{T^{2}}{2} & 0 \\ 
            T               & 0 \\
            0 & \frac{T^{3}}{6} \\
            0 & \frac{T^{2}}{2} \\
            0 & T               \\
        \end{bmatrix}
    \end{aligned} \:\:
\end{equation}
