The method for generating a ZMP reference trajectory, $\mathbf{y_d^*}$, 
is covered in Section~\ref{sec:NovelTraj}, thus it is simply a matter 
of simulating the discretised pendulum dynamics with the optimal input 
$\mathbf{u_d^*}$ along some predefined trajectory.

\subsubsection*{LIPM ZMP Model}

The pendulum model is initialised at zero in both $X$ and $Z$, with the 
mass constrained to move in the $XZ$ plane at $y_c = 0.5$ metres. This is depicted in
Figure~\ref{fig:matLIPM}, with the pendulum mass and shaft in red, while
the constraint plane is a pale red.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.95\linewidth]{_content/40_zmp/LIPM/LIPM_INIT.eps}
        \caption{Inverted Pendulum Initial Position}\label{fig:matLIPM}
    \end{center}
\end{figure}

The arbitrary trajectory chosen is a sinusoidal function of time, set out in equation~\eqref{eq:LIPM_TRJ}, 
and is represented in black. The initial $ZMP(x,z)$, which is the first value of $\mathbf{y_d}$, is at the origin.
This is seen in Figure~\ref{fig:matLIPM} as the blue cross.

\begin{equation}\label{eq:LIPM_TRJ}
    \begin{aligned}
        \lambda &= 2                        \\
        \dot{x} &= 0.2                      \\
        A &= 0.25                           \\
        f &= \dot{x} \lambda^{-1}           \\
        \omega &= 2 \pi f                   \\
        \mathbf{Q}(t) &= \begin{bmatrix}
            \dot{x}t & 0 & A \cdot \sin(\omega t) 
        \end{bmatrix}^{\top}
    \end{aligned}
\end{equation}

To travel along this trajectory, a step length of $0.15$ metres is used, with a footstep radius of
$0.1$ metres. This parameterisation of this footstep is similar to the full humanoid robot.
Weights $\mathbf{Q}_e$, $\mathbf{Q}_x$ and $\mathbf{R}$ are set as $\mathbf{I}_{2 \times 2}$, 
$\mathbf{0}_{6 \times 6}$ and $\mathbf{1e^{-3}}_{2 \times 2}$ respectively. The model is then 
run at $50$ Hz, with a $1$ second time horizon, for $10$ seconds.

In order to step along this trajectory with preview control, the controller needs to have knowledge
of the ZMP reference from $t_k + 1$ to $t_k + Nl$, where $NL$ is the time horizon. Thus, algorithm~\ref{alg:Glb2Fts} requires modification. Algorithm~\ref{alg:Prev2Fts} previews forward to the 
time horizon, $Nl$, from each increment along the global trajectory. Upon the time horizon reaching
the end of the trajectory, $\mathbf{REF}$ takes the final ZMP reference. This modification 
provides the ZMP reference preview that the controller requires.

\input{_content/X0_traj/X0_AlgC.txt}

\clearpage

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.95\linewidth]{_content/40_zmp/LIPM/LIPM_50hz1sec.eps}
        \caption{Inverted Pendulum Model $\mathbf{y_d}$ vs $\mathbf{y_d^*}$, at 50Hz}\label{fig:matLIPM50a}
    \end{center}
\end{figure}

Figure~\ref{fig:matLIPM50a} depicts the achieved ZMP, in red, in comparison with the ZMP reference trajectory, 
in black. Significant overshoot is clearly evident along the $Z$ axis, and exists along the $X$ axis too. This
overshoot is most evident when viewing the ZMP reference trajectory, $\mathbf{y_d^*}$, and the achieved 
ZMP trajectory, $\mathbf{y_d}$, from above.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.95\linewidth]{_content/40_zmp/LIPM/LIPM_50hz1sec_BIRD.eps}
        \caption{Inverted Pendulum Model view from above, at 50Hz}\label{fig:matLIPM50b}
    \end{center}
\end{figure}

Figure~\ref{fig:matLIPM50b} demonstrates the impact of the aforementioned overshoot. In addition,
there is evidence of some nonlinear behaviour in the achieved ZMP trajectory. On closer inspection
of the figure, it is evident that this behaviour worsens with time. This is most apparent in the lower
half of Figure~\ref{fig:matLIPM50b} as the ZMP trajectory, in blue, deteriorates from an initially
linear path between ZMP reference footsteps.

Doubling the system frequency significantly reduces the ZMP error. This is evident in Figure~\ref{fig:matLIPM100a},
which depicts exactly the same model, run with the same time horizon, at double the frequency.
Overshoot is evident along the $Z$ and $X$ axes too, however it has been substantially reduced following the 
change in system frequency.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.95\linewidth]{_content/40_zmp/LIPM/LIPM_200hz1sec.eps}
        \caption{Inverted Pendulum Model $\mathbf{y_d}$ vs $\mathbf{y_d^*}$, at 200Hz}\label{fig:matLIPM100a}
    \end{center}
\end{figure}

Again this is most evident when view from above, as depicted in Figure~\ref{fig:matLIPM100b}. However, this
reduction in ZMP error comes at the cost of processing time. In order to counteract the extended processing
the time horizon is reduced. To further reduce the ZMP error, the penalty on the control action, $\mathbf{R}$, 
can be reduced to allow the controller to make more violent control actions.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.95\linewidth]{_content/40_zmp/LIPM/LIPM_200hz1sec_BIRD.eps}
        \caption{Inverted Pendulum Model view from above, at 200Hz}\label{fig:matLIPM100b}
    \end{center}
\end{figure}

\subsubsection*{Implementation of Zero Moment Point Locomotion}

Unlike quasistatic locomotion, the Zero Moment point approach generates a trajectory
for the CoM based on the ZMP reference. Figure~\ref{fig:TRJ_ZMP} provides a
high level overview of this dynamically stable approach, first proposed by Kajita \citep{kajita_2003_biped}.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.5\linewidth]{_content/X0_traj/X0_fig_pref.png}
        \caption{Kajita's ZMP pattern generator \citep{kajita_2003_biped}.}\label{fig:TRJ_ZMP}
    \end{center}
\end{figure}

Given a ZMP reference, or series of footsteps, the LIPM provides a trajectory 
for the CoM of the robot. Thus, the IKM for this approach is as follows;

\begin{equation}\label{eq:3D_ZMP}
    \begin{split}
        \mathbf{q^{*}} = \underset{\mathbf{q}}{\mathrm{\arg\:\min}}\:\:
        &\mathbf{K_{e}}      \lVert  {   k(\mathbf{q}) - \mathbf{x_{e}^*}                           }   \rVert \: + \\
        &\mathbf{K_{CoM}}    \lVert  {   \mathbf{LIPM}(x,y_c,z) - \mathbf{r^{B}_{CoM}}(\mathbf{q})  }   \rVert \: + \\
        &\mathbf{K_{q}}      \lVert  {   \mathbf{q_{0}} - \mathbf{q}                                }   \rVert \: + \\
        &\mathbf{K_{tj}}     \lVert\:{   {(\vec{TJ}^{B}_{(t)})}^{\top} \cdot \vec{AB}_b(\mathbf{q})   } \:\rVert .
    \end{split}
\end{equation}

All these constraints have been discussed in Section~\ref{sec:3D_QS}. Note however, that rather than 
shifting the CoM towards the centre of the support polygon, the approach is to now track the mass
of the linear inverted pendulum. As the pendulum must accelerate in order to maintain dynamic 
stability, the nonlinear constraint restricting the average velocity of the CoM is removed.

The chosen trajectory is a sinusoidal with parameters found in~\eqref{eq:3DZMP_TRJ}.
The wavelength, $\lambda$, is two metres, while the target axial velocity is $0.15 ms^{-1}$, and the 
amplitude of the sine wave is $0.25$ metres. This yielded frequency $f$, and angular velocity, $\omega$, 
as seen above. The midpoint between the feet, is added so that the resulting time iterated trajectory would 
begin from the centre of the robot.

\begin{equation}\label{eq:3DZMP_TRJ}
    \begin{aligned}
        \lambda &= 2                        \\
        \dot{x} &= 0.15                     \\
        A &= 0.25                           \\
        f &= \dot{x} \lambda^{-1}           \\
        \omega &= 2 \pi f                   \\
        \mathbf{Q}(t) &= \frac{ \mathbf{r_{L}} + \mathbf{r_{R}} } {2} + 
        \begin{bmatrix}
            \dot{x}t & 0 & A \cdot \sin(\omega t) 
        \end{bmatrix}^{\top}
    \end{aligned}
\end{equation}

The model for the robot itself, found in Section~\ref{sec:3Dm}, is initialised with the same joint value array found 
in equation~\eqref{eq:3D_JA_INIT}.

The right foot is chosen as the global origin, and thus the left foot is designated the as 
the initial End Effector. Finally, the system frequency is chosen as $200 Hz$, and the simulation
time, $5$ seconds. The initial CoM is passed to the LIPM model, while the initial ZMP reference is 
set as the right foot. This ensures the LIPM initial shifts the CoM toward the right foot.
To step along the trajectory a step size of $0.05$ metres and step height of $0.05$ metres are chosen.
The resulting initialised robot is presented in Figure~\ref{fig:3DQS_init}.
Immediately evident is the partial sine wave trajectory, in black, beginning from the floor projected CoM.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.8\linewidth]{_content/40_zmp/ZMP/figZMPinit.png}
        \caption{Initialised 3D model of the Nugus Robot, with LIPM.}\label{fig:ZMP_init}
    \end{center}
\end{figure}

To run the model, Algorithm~\ref{alg:3DalgSimp} is used after adding the ZMP reference preview 
component from Algorithm~\ref{alg:Prev2Fts}. As mentioned in~\ref{sec:3D_QS}, if the total 
time taken spent processing in preparation for the next step is greater than the time-step of the 
system, then the algorithm has failed. Thus, the time horizon $Nl$ now has a moderate impact on the success 
of implementing this approach to locomotion on a real-time system. For the purpose
of this report, it is assumed that this processing period, shifting the ZMP preview reference
forward in time at each increment along the global trajectory, is negligible. 

\subsubsection*{MATLAB Simulation Results}

Figure~\ref{fig:ZMP_traj} depicts the initial position of the feet, in red and blue, with respect to 
the sinusoidal trajectory, in black. The End Effector trajectory, shown in green, demonstrates the 
switching nature of algorithm~\ref{alg:3DalgSimp}. This trajectory begins at the 
left foot, completes a step, and then switches to the right foot. In this instance, due to 
the brevity of the step magnitude, the initial step appears to be nothing more than a raising 
and lowering of the left foot.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.8\linewidth]{_content/40_zmp/ZMP/figZMPtrj.png}
        \caption{ Dynamically stable End Effector trajectory }\label{fig:ZMP_traj}
    \end{center}
\end{figure}

On the right-hand side of Figure~\ref{fig:ZMP_traj}, in red, the path of the 
left foot, as End Effector, is clearly visible, rising, and falling with each step. The right foot,
in blue, moves in much the same manner.

Figure~\ref{fig:ZMP_action} proves the success of this implementation of 
dynamically stable locomotion. In this instant, both feet are planted on the ground.
In green, the path of the achieved ZMP is quite clearly traveling towards the right 
support polygon as the left foot prepares to take a subsequent step. The path 
of the LIPM, in pink, oscillates at less than one quarter of the amplitude of the
ZMP.\@ The trajectory of the End Effector has been omitted for clarity.

\begin{figure}[!h] 
    \begin{center}
        \includegraphics[width=.8\linewidth]{_content/40_zmp/ZMP/figZMPAction.png}
        \caption{ Zero Moment Point Locomotion. Time period: 4.235 $\to$ 4.855 seconds. The achieved ZMP is depicted in green, while the CoM is in pink.}\label{fig:ZMP_action}
    \end{center}
\end{figure}

Lastly, Figure~\ref{fig:ZMPlipm} depicts the ZMP reference tracking error. The initial overshoot is 
a consequence of starting with a stationary CoM, as the model must immediately act to accelerate the
CoM and reach the initial desired ZMP within the right foot support polygon.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[width=.8\linewidth]{_content/40_zmp/ZMP/figZMPlipm.png}
        \caption{$X$ and $Z$ ZMP reference trajectories, and the achieved ZMP.\@ ZMP error include for completeness.}\label{fig:ZMPlipm}
    \end{center}
\end{figure}
 
An animation of this implementation can be found here: \url{https://www.youtube.com/watch?v=u95485HoN2s}.
